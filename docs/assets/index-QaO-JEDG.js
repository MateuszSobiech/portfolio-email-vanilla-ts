var l=Object.defineProperty;var c=(n,t,s)=>t in n?l(n,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[t]=s;var o=(n,t,s)=>(c(n,typeof t!="symbol"?t+"":t,s),s);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))r(e);new MutationObserver(e=>{for(const i of e)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&r(a)}).observe(document,{childList:!0,subtree:!0});function s(e){const i={};return e.integrity&&(i.integrity=e.integrity),e.referrerPolicy&&(i.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?i.credentials="include":e.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function r(e){if(e.ep)return;e.ep=!0;const i=s(e);fetch(e.href,i)}})();class d{constructor(t){this.state=t,this.render(),this.addListeners()}render(){this.state.container.innerHTML=`
    <button class="add-button">
      <svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
        <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
      </svg>
      Add email
    </button>`}addListeners(){const t=this.state.container.querySelector("button");t==null||t.addEventListener("click",this.state.onClick)}}class u{constructor(t){this.state=t,this.render(),this.addListeners()}render(){const{email:{id:t,text:s},lastInput:r}=this.state;this.state.container.innerHTML=`
    <div class="email-input-container">
      <input id=${t} type="email" value="${s}" class="email-input" required>
      <label class="email-input-label">Email <span style="color: red;">*</span></label>
      ${r?"":'<button type="button" class="email-input-button">X</button>'}
    </div>`}addListeners(){const t=this.state.container.querySelector("input");t==null||t.addEventListener("input",()=>{this.state.email.text=t.value,t.setAttribute("value",t.value)});const s=this.state.container.querySelector("button");s==null||s.addEventListener("click",this.state.onRemove)}}class h{constructor(t){this.state=t,this.render(),this.addListeners()}render(){this.state.container.innerHTML=`
    <button class="save-button">Save</button>`}addListeners(){const t=this.state.container.querySelector("button");t==null||t.addEventListener("click",this.state.onClick)}}class m{constructor(t){o(this,"actions",{getEmails:()=>this.state.emails});this.state=t,this.render(),this.renderEmailInputs(),this.renderAddButton(),this.renderSaveButton()}render(){this.state.container.classList.add("emails-form"),this.state.container.innerHTML=`
    <h1>Emails</h1>
    <p class="emails-form-sub-header">Email addresses to send messages, you can add only 5 addresses.</p>
    <form onsubmit="return false" id="inputs"></form>
    <div id="add-button"></div>
    <div id="save-button"></div>`}renderEmailInputs(){const t=this.state.container.querySelector("#inputs");t.innerHTML="",this.state.emails.forEach(s=>{const r=document.createElement("div");t.append(r),new u({container:r,email:s,lastInput:this.state.emails.length===1,onRemove:()=>{this.state.emails=this.state.emails.filter(e=>e.id!==s.id),this.renderEmailInputs()}})})}renderAddButton(){new d({container:this.state.container.querySelector("#add-button"),onClick:()=>{this.state.emails.length!==5&&(this.state.emails.push({id:new Date().getTime(),text:""}),this.renderEmailInputs())}})}renderSaveButton(){new h({container:this.state.container.querySelector("#save-button"),onClick:()=>{this.state.container.querySelector("#inputs").reportValidity()&&this.sendRequest()}})}sendRequest(){console.table(this.state.emails)}}const p=new m({container:document.querySelector("#app"),emails:[{id:new Date().getTime(),text:""}]});console.table(p.actions.getEmails());
